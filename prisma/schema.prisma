// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  password String
  role     String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile          Profile?
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  appointments     Appointment[]
}

model Profile {
  id        String @id @default(cuid())
  userId    String @unique
  bio       String?
  avatarUrl String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TattooArtist {
  id          String   @id @default(cuid())
  name        String   @unique
  bio         String
  specialty   String   // Uzmanlık alanı (Minimalist, Realistik, Tribal, etc.)
  imageUrl    String
  experience  Int      // Yıl cinsinden deneyim
  rating      Float    @default(0)
  isActive    Boolean  @default(true)
  location    String   @default("İstanbul") // Çalıştığı şehir/bölge
  hourlyRate  Float    @default(500) // Saatlik ücret
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  appointments Appointment[]
}

model Appointment {
  id          String   @id @default(cuid())
  userId      String
  artistId    String
  date        DateTime
  time        String   // Saat bilgisi (örn: "14:00")
  status      String   @default("pending") // pending, confirmed, completed, cancelled
  description String?  // Kullanıcının dövme açıklaması
  notes       String?  // Admin/sanatçı notları
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist      TattooArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  fromUser  User     @relation("MessagesSent", fields: [fromId], references: [id], onDelete: Cascade)
  toUser    User     @relation("MessagesReceived", fields: [toId], references: [id], onDelete: Cascade)
}


